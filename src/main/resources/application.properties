# 该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，
# 但是你自己应用的日志并不会输出为DEBUG级别。
debug=true
spring.output.ansi.enabled=detect

# 多环境配置,选择要加载的配置文件
# application.properties中设置spring.profiles.active=dev，就是说默认以dev环境设置
# application.properties中配置通用内容，并设置spring.profiles.active=dev，以开发环境为默认配置

spring.profiles.active=dev

# 在一些情况下，有些参数我们需要希望它不是一个固定的值，比如密钥、服务端口等。
# Spring Boot的属性配置文件中可以通过${random}来产生int值、long值或者string字符串，来支持属性的随机值。

# 随机字符串
com.didispace.blog.value=${random.value}
# 随机int
com.didispace.blog.number=${random.int}
# 随机long
com.didispace.blog.bignumber=${random.long}
# 10以内的随机数
com.didispace.blog.test1=${random.int(10)}
# 10-20的随机数
com.didispace.blog.test2=${random.int[10,20]}

# 自定义属性与加载
com.penelopenest.blog.name=程序猿DD
com.penelopenest.blog.title=Spring Boot教程

# 参数间的引用:在application.properties中的各个参数之间也可以直接引用来使用，就像下面的设置：
com.penelopenest.blog.desc=${com.penelopenest.blog.name}正在努力写《${com.penelopenest.blog.title}》


# thymeleaf start
# 在这里配置的属性，实际就是注入到 org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties 中。
#
spring.thymeleaf.mode=HTML5
spring.thymeleaf.cache=false
# thymeleaf end


# redis配置
# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0

#mysql 配置
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#连接JNDI数据源
#当你将应用部署于应用服务器上的时候想让数据源由应用服务器管理，那么可以使用如下配置方式引入JNDI数据源。
#spring.datasource.jndi-name=java:jboss/datasources/customers